# -*- coding: utf-8 -*-
"""Statistics Assignment-2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1O2kbEFsoWUWvoxhJrHzFytRdK28a0OOr

## Descriptive Statistics
"""

Descriptive statistics is the type of statistics which is used to summarize and describe the dataset. 
It is used to describe the characteristics of data. Descriptive statistics are generally used to determine if the sample is normally distributed. 
 It is displayed through tables, charts, frequency distributions and is generally reported as a measure of central tendency.

""" Import **NumPy**, **SciPy**, and **Pandas**"""

import numpy as np
import pandas as pd
from scipy import stats

""" Randomly generate 1,000 samples from the normal distribution using `np.random.normal()`(mean = 100, standard deviation = 15)"""

samples = np.random.normal(loc=100, scale=15, size=1000)
samples

"""Compute the **mean**, **median**, and **mode**"""

from scipy import stats

mean = np.mean(samples)
print('mean:', mean)
median = np.median(samples)
print('median:', median)
mode = stats.mode(samples)
print('mode:', mode)

"""Compute the **min**, **max**, **Q1**, **Q3**, and **interquartile range**"""



min = np.min(samples)
print('min:', min)
max = np.max(samples)
print('max:', max)
q1 = np.percentile(samples, 25)
print('q1:', q1)
q3 = np.percentile(samples, 75)
print('q3:', q3)
iqr = stats.iqr(samples)
print('iqr:', iqr)

"""Compute the **variance** and **standard deviation**"""

variance = np.var(samples)
print('variance:', variance)
std_dev = np.std(samples)
print('standar deviation:', std_dev)

"""Compute the **skewness** and **kurtosis**"""

from scipy.stats import kurtosis, skew

skewness = skew(samples)
print('skewness:', skewness)
kurtosis = kurtosis(samples)
print('kurtosis:', kurtosis)

"""## NumPy Correlation Calculation

Create an array x of integers between 10 (inclusive) and 20 (exclusive). Use `np.arange()`
"""

x = np.arange(10, 20)
x

"""Then use `np.array()` to create a second array y containing 10 arbitrary integers."""

y =  np.array((1, 2, 3, 4, 5, 6, 7, 8, 9, 10))
y

"""Once you have two arrays of the same length, you can compute the **correlation coefficient** between x and y"""

a = np.arange(5, 10)
b = np.arange(10, 15)


r = np.corrcoef(a, b)
print('correlation coefficient :', r)

"""## Pandas Correlation Calculation

Run the code below
"""

x = pd.Series(range(10, 20))
print(x)
y = pd.Series([2, 1, 4, 5, 8, 12, 18, 25, 96, 48])
print(y)

"""Call the relevant method  to calculate Pearson's r correlation."""

import pandas as pd

r = x.corr(y)
print("Pearson's r correlation:", r)

"""OPTIONAL. Call the relevant method to calculate Spearman's rho correlation."""

rho = x.corr(y, method='spearman')
print("Spearman's rho correlation:", rho)

tau = x.corr(y, method='kendall') 
print("Kendall's tau correlation:", tau)

"""## Seaborn Dataset Tips

Import Seaborn Library
"""

import seaborn as sns

"""Load "tips" dataset from Seaborn"""

tips = sns.load_dataset("tips")
tips

"""Generate descriptive statistics include those that summarize the central tendency, dispersion"""

The central tendency of a distribution is an estimate of the “center” of a distribution of values. 
There are three major types of estimates of central tendency:

   Mean : sum of the values and devided number of values
   Median : middle of the set of values. (set have to be sorted smaller than bigger)
   Mode : frequent of the value

"""Call the relevant method to calculate pairwise Pearson's r correlation of columns"""

r = x.corr(y)